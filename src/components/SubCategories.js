import React, { Component } from "react";import {View, Text, Image, TouchableOpacity, FlatList, Dimensions, BackHandler} from "react-native";import {Container, Content, Icon, Header, Item, Input, Toast} from 'native-base'import FooterSection from './FooterSection';import Styles from '../../assets/styles'import i18n from '../../local/i18n'import axios from 'axios'import CONST from '../consts';import { DoubleBounce } from 'react-native-loader';import {connect} from "react-redux";import { Permissions, Notifications } from 'expo'import {NavigationEvents} from "react-navigation";import _ from 'lodash'const height = Dimensions.get('window').height;let likesIDs = [];class SubCategories extends Component {	constructor(props){		super(props);		this.state={			categories: [],			search:'',			loader: false,			token: '',			notifyCounter: 0,			likesIDs: _.uniq(likesIDs),			routeName: this.props.navigation.state.routeName,			isRefreshed: false,			userBalance: 0,			hasDollar: false		}	}	async componentWillMount() {		Notifications.setBadgeNumberAsync(0);		const { subCategories } = this.props.navigation.state.params;		subCategories.map((subCategory) => {			if (subCategory.like){				console.log('chaeck liked', subCategory.like + ' ' + typeof subCategory.like);				likesIDs.push(subCategory.subDepartmentId);			}		});		axios.post( CONST.url + 'user/getUserBalance', { lang : (this.props.lang).toUpperCase(), user_id: this.props.user.user_id})			.then(response => {				this.setState({ userBalance: response.data.data.price, hasDollar: response.data.data.hasDollar });			});		this.setState({ likesIDs });		const { status: existingStatus } = await Permissions.getAsync(			Permissions.NOTIFICATIONS		);		let finalStatus = existingStatus;		if (existingStatus !== 'granted') {			const { status } = await Permissions.askAsync(Permissions.NOTIFICATIONS);			finalStatus = status;		}		if (finalStatus !== 'granted') {			return;		}		let token = await Notifications.getExpoPushTokenAsync();		this.setState({ token });		// alert(token);		//		// console.log('device_id_', token);	}	static navigationOptions = () => ({		drawerLabel: () => null	});	setLike(id){		if (this.state.likesIDs.includes(id)){			_.remove(likesIDs, function(n) {				return n == id;			});		}else{			likesIDs.push(id)		}		this.setState({ likesIDs, isRefreshed: !this.state.isRefreshed });		axios({			url: CONST.url + 'department/favoritDepartment',			method: 'POST',			data: {subDepartmentId: id, user_id: this.props.user.user_id}		})	}	renderHeart(isLiked, id){		console.log('liked ids array', this.state.likesIDs);		if (this.state.likesIDs.includes(id)){		//	alert('help me');			likesIDs.push(id);			return(				<Icon name='heart' type='AntDesign' style={{ color: '#f00' }} />			)		}		return (<Icon name='heart' type='AntDesign' style={{ color: '#fff' }} />);	}	noBalance() {		this.setState({ isModalVisible: false });		this.props.navigation.navigate('charge');		Toast.show({			text: i18n.t('noBalanceReq'),			type: "danger",			duration: 3000		});	};	openAd(id){		if (this.state.userBalance >= 1){			this.setState({ selectedAd: id });			this._toggleModal()		}else{			this.noBalance()		}	}	_keyExtractor = (item, index) => item.id;	renderItems = (item, id) => {		// const departmentId = this.props.navigation.state.params.		return(			<TouchableOpacity onPress={() => this.props.navigation.navigate('category', { id: item.subDepartmentId, departmentId: id, name: item.subDepartmentName })} style={Styles.categoryList}>				<View style={Styles.homeViewContainer}>					<TouchableOpacity onPress={() => this.setLike(item.subDepartmentId)} style={{ width: 35, height: 35, alignSelf: 'flex-end', position: 'absolute', zIndex: 10, margin: 10, right: 0}}>						{ this.renderHeart(item.like, item.subDepartmentId) }					</TouchableOpacity>					<View style={Styles.homeTextCont}>						<Text style={Styles.homeText}>{item.subDepartmentName}</Text>					</View>					<Image source={{ uri: 'https://' + item.subImage }} resizeMode={'cover'} style={Styles.flatImage}/>				</View>			</TouchableOpacity>		);	};	renderLoader(){		if (this.state.loader){			return(				<View style={{ alignItems: 'center', justifyContent: 'center', height, alignSelf:'center' , backgroundColor:'#fff' , width:'100%'  , position:'absolute' , zIndex:1 }}>					<DoubleBounce size={20} color="#00918B" />				</View>			);		}	}	handleBackPress = () => {		if (this.state.routeName === 'home'){			BackHandler.exitApp();			return true		}else			this.goBack();	};	goBack(){		this.props.navigation.goBack();	}	onFocus(){		this.componentWillMount()	}	render() {		const { subCategories, name, id } = this.props.navigation.state.params;		return (			<Container style={{}}>				<NavigationEvents onWillFocus={payload => this.onFocus(payload)} />				<Header style={Styles.header} noShadow>					<View style={Styles.headerView}>						<TouchableOpacity onPress={() => this.props.navigation.goBack()} style={Styles.headerTouch}>							<Image source={require('../../assets/images/back.png')} style={[Styles.headerMenu , Styles.transform, { paddingHorizontal: 20 }]} resizeMode={'contain'} />						</TouchableOpacity>						<Text style={[Styles.headerBody , { flex:1, top:-3 , textAlign:'center'}]}>{ name }</Text>					</View>				</Header>				<Content style={{}}>					{ this.renderLoader() }					<View style={Styles.flatContainer}>						<FlatList							data={subCategories}							renderItem={({item}) => this.renderItems(item, id)}							numColumns={2}							keyExtractor={this._keyExtractor}							extraData={this.state.isRefreshed}						/>					</View>				</Content>			</Container>		);	}}const mapStateToProps = ({ lang, profile, auth }) => {	return {		lang: lang.lang,		user: profile.user,		auth: auth.user,	};};export default connect(mapStateToProps, {})(SubCategories);